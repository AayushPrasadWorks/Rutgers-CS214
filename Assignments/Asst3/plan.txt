Globals 

extern int h_errno
	-  used by the name resolution functions to return error values. 
	- in netdb.h

int client_mode
	- holds the client mode 

Port 
	- defined, hard-coded value

max_buffer_size
	- defined, hard-coded value

hostent 
	- structure that describes an internet host
	- in netdb.h

enum describing the various flags used in open
- allows us to assign numbers to each flag, thereby allowing us to pass int arguments
  when we use open. Very helpful!

enum describing the different kinds of error messages
	- flag error
	- errno error
	- host error 
	- permi error

Functions

displayError
	- parameter of type ErrorType
	- depending on the value of the parameter, displays appropriate error message
	- returns void 

displayPermissionError
	- takes a file descriptor [int] as parameter
	- returns void 
	- depending on the value of file descriptor, prints appropriate permission error
	- fd = -1: file is open in unrestricted mode 
	- fd = -2: file is open in exclusive mode
	- fd = -3: file is open in transaction mode
	- fd = -4: invalid file descriptor [?]

netserverinit
	- parameters hostname [char *] and filemode [int]
	- returns 0 on success, -1 on error, and h_errno set correctly
	- initially, h_errno is set to 0
	- call gethostbyname, passing hostname as parameter
	- gethostbyname returns a struct, which gets assigned to hostent struct
	- if after the gethostbyname call, the hostent struct is null, we call 
	  displayError, and pass HOST_ERROR as argument, and finally return -1
	- otherwise, it means gethostbyname has successfully returned the struct
	  corrosponding to the machine we are trying to connect to. We now check
	  the values of the filemode. if the filemode is either 0,1,2, we assign
	  the filemode to client_mode and return 0, otherwise, call displayError 
	  and pass PERMI_ERROR as argument, and return -1

netopen
	- parameters path [char *], flags [int]
	- returns new file descriptor [int], or -1 in the caller's context if an 
	  error occurred [in which case, errno should be set appropriately]
	- the flags get assigned to flag enum 
	- local variables: 
	  file descriptor, initially set to -1
	  mode [char *]
	  filepath = path
	- set the mode based on the flags - O_RDONLY, O_WRONLY, O_RDWR, else, displayError
	  passing FLAG_ERROR as parameter
	- Convert the permission to string; by default, the client will have 
	  unrestricted mode
	- make a socket
	- if the result of making socket < 0: displayError(ERRNO_ERROR), 
	  return file descriptor
	- connect to the netfileserver
	- check the connection
	- sending info to server: 
		- let the info be bundled into one string, each attribute 
		  separated by a space
		- info to be sent to server: 
			- filepath
			- mode
			- permission
			- 1
	- write the info into the netopen socket calling write()
	- if the int returned by write() = -1, display(ERRNO_ERR), return fd
	- try to read from server
		- call read() function 
		- if the int returned by read() = -1, display(ERRNO_ERROR)
		- return filedescriptor
	- read file descriptor and errno message from server
	- check if if file descriptor = -1
		- tokenize the info sent to server by spaces
		- atoi each token
		- if at the end of atoi'ing, the value of holding variable
		  is still -1:
			- set filedescriptor value to -1
			- encode the errno code to a char array
			- copy the ecnoded errno code into info
			- do same for errno val, file descrip
			- convert enum code to int
			- check if the error code is negative
				- throw permission error if it is
				- if not, set errno to server enum code, show error
	- if not -1, set filedescriptor to value of holding variable
	- close netopen socket
	- return filedescriptor

netread

